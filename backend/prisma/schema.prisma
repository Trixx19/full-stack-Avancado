// Conteúdo para backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 1. Mudar Role para os tipos de perfil corretos
enum PerfilUsuario {
  CLIENTE
  VENDEDOR
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  // 2. Usar o novo Enum de Perfil
  perfil    PerfilUsuario @default(CLIENTE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  compras   Order[]  @relation("ClienteCompras")
  vendas    Order[]  @relation("VendedorVendas")
  produtosCadastrados Product[]
}

model Product {
  id          Int       @id @default(autoincrement())
  sku         String    @unique
  name        String
  description String?   // Adicionar descrição
  price       Float
  stock       Int       @default(0)
  image       String?   // Adicionar campo para imagem

  // 3. Adicionar relação com o Vendedor
  vendedorId  Int
  vendedor    User      @relation(fields: [vendedorId], references: [id])

  orderItems  OrderItem[]
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  total     Float
  
  // 4. Adicionar status da venda
  status    String   @default("CONCLUIDA") // ex: CONCLUIDA, CANCELADA_CLIENTE, CANCELADA_VENDEDOR

  // 5. Relação com Cliente e Vendedor
  clienteId Int
  cliente   User     @relation("ClienteCompras", fields: [clienteId], references: [id])

  vendedorId Int
  vendedor   User     @relation("VendedorVendas", fields: [vendedorId], references: [id])

  items     OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])
  
  quantity  Int     @default(1)
  price     Float

  @@map("order_items")
}